{
    "start": "Before scanning vertices, $A$ and $B$ are empty.",
    "0": "The first vertex being processed is $2$, circled by orange ring, called $v_2$. By the decision condition, the sum of weights between all vertices in set $B$ and $v_2$ is less than that between $A$ and $v_2$. Therefore, we add append $v_2$ to $B$. Mark $v_2$ in green. Refer the status of the algorithm to the following diagram. We should see that the loop variant should hold afterwards: the sum of weights of edges between $A$ and $B$ is no smaller than the sum of the rest of the edge weights.<br><br>",
    "2": "The second vertex being processed is $6$, circled by orange ring. By the decision condition, the sum of weights between all vertices in set $B$ and $v_6$ is less than that between $A$ and $v_6$. Therefore, we add append $v_6$ to $B$ again. Mark $v_6$ in green. Refer the status of the algorithm to the following diagram.<br> We should see that the loop variant should hold afterwards: the sum of weights of edges between $A$ and $B$ is no smaller than the sum of the rest of the edge weights. ",
    "6": "The third vertex being processed is $3$, circled by orange ring. By the decision condition, the sum of weights between all vertices in set $A$ and $v_3$ is less than that between $A$ and $v_3$. Therefore, we add append $v_3$ to $B$ again. Mark $v_3$ in magenta. Refer the status of the algorithm to the following diagram. Note, since $v_3$ and $v_6$ are in different sets, we mark the edge between them in cyan. This edge is one of the cuts.<br>We should see that the loop variant should hold afterwards: the sum of weights of edges between $A$ and $B$ is no smaller than the sum of the rest of the edge weights.",
    "3": "The third vertex being processed is $3$, circled by orange ring. By the decision condition, the sum of weights between all vertices in set $A$ and $v_3$ is less than that between $A$ and $v_3$. Therefore, we add append $v_3$ to $B$ again. Mark $v_3$ in magenta. Refer the status of the algorithm to the following diagram. Note, since $v_3$ and $v_6$ are in different sets, we mark the edge between them in cyan. This edge is one of the cuts.<br>We should see that the loop variant should hold afterwards: the sum of weights of edges between $A$ and $B$ is no smaller than the sum of the rest of the edge weights.",
    "7": "The fourth vertex being processed is $7$, circled by orange ring. Similarly, we add append $v_7$ to $A$ and mark the edge between $v_7$ and all incidents edges whose another endpoint is in $A$, in cyan. This edge is one of the cuts.",
    "1": "Similarly, add $v_1$ to $B$ (green). Since $v_1$ and $v_3$ lies in different set, we mark their edge in cyan. Note that the edge between $v_1$ and $v_2$ is an edge belongs to $A$, so it's not marked in cyan anyway.",
    "8": "",
    "4": "$v_4$ belongs to $A$ after this iteration. Note that although $v_5$ is a neighbor of $v_5$, $v_5$ has not been scanned, so it's gray yet. We do not mark any incident edges to $v_5$ yet.",
    "5": "Now $v_5$ is scanned. By the decision condition, $v_5$ belongs to $B$. Now we color all incident edges of $v_5$ whose another endpoint is in $A$ in cyan.",
    "9": "$v_9$ is the last vertex being scanned. Afterwards, our cut is formed: cut edges are in cyan. We can draw a mental curve that partitions $A$ and $B$.<br>The last iteration should satisfy the loop invariant as well: the sum of edge weights between $A$ and $B$ should be greater than or equal to the sum of the rest of edge weights. The sum of edge weights between $A$ and $B$ is the cut of this deterministic algorithm. Recall that the maximum cut is ideally the sum of all edge weights. Since $A$ and $B$ are the final output after this iteration, the invariant conclude that the final $A$ and $B$ is guaranteed to have at least more than or equal to half of the maximum cut. Again recall that the maximum cut for max-cut problem is optimal cut. Hence the algorithmâ€™s approximation factor is 2.<br>The ratio is `CutWeights` divides `TotalWeights`. The ratior indicates how many cut weights are captured by our algorithm under input sequence $[2,6,3,7,1,8,4,5,9]$. Ratio=0.74 > 0.5 shows that more than half of the maximum cut are captured, which indeed satisfy the invariant.",
    "end": ""
}